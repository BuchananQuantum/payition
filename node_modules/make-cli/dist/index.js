"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _compact = _interopRequireDefault(require("@dword-design/functions/dist/compact"));

var _join = _interopRequireDefault(require("@dword-design/functions/dist/join"));

var _commander = _interopRequireDefault(require("commander"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const applyOptions = (program, options = []) => {
  for (const option of options) {
    const commanderOptions = new _commander.default.Option(option.name, option.description, option.defaultValue);

    if (option.choices) {
      commanderOptions.choices(option.choices);
    }

    program.addOption(commanderOptions);
  }
};

var _default = (config = {}) => {
  config = {
    commands: [],
    options: [],
    ...config
  };
  const program = new _commander.default.Command();

  if (config.version) {
    program.version(config.version);
  }

  if (config.name) {
    program.name(config.name);
  }

  if (config.usage) {
    program.usage(config.usage);
  }

  if (config.arguments) {
    program.arguments(config.arguments);
  }

  if (config.allowUnknownOption) {
    program.allowUnknownOption();
  }

  applyOptions(program, config.options);

  if (config.action) {
    program.action(config.action);
  }

  for (const command of config.commands) {
    var _ref, _ref2;

    const cmd = program.command((_ref = (_ref2 = [command.name, command.arguments], (0, _compact.default)(_ref2)), (0, _join.default)(' ')(_ref)));
    cmd.description(command.description);
    cmd.action(command.handler);
    applyOptions(cmd, command.options);
  }

  if (config.defaultCommandName && process.argv.length <= 2) {
    return config.commands.find(command => command.name === config.defaultCommandName).handler();
  }

  if (config.commands.length > 0) {
    program.on('command:*', () => program.help());
  }

  return program.parseAsync(process.argv);
};

exports.default = _default;
module.exports = exports.default;